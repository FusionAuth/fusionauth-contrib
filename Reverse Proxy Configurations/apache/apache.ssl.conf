# Change the following:
# ab613909-571b-457c-a89e-336764f545d7 -> to the client_id of your application
# 92e5c59d-4a54-499d-944f-70a06a4881a2 -> to the tenant ID of your tenant
# http://localhost:9011/ -> to the location of your FusionAuth service
# auth.example.com -> to the domain of your FusionAuth server
# /usr/local/fusionauth/fusionauth-app/web -> to the path to your FA static content

# Optional: If you want to serve static files directly without FusionAuth
<Directory "/usr/local/fusionauth/fusionauth-app/web/">
 Require all granted
 allow from all
 AllowOverride none
</Directory>

# Redirect all traffic to SSL, except LE challenges
<VirtualHost *:80>
 ServerName auth.example.com
 ErrorLog /var/log/httpd/auth.example.com-error.log
 CustomLog /var/log/httpd/auth.example.com-access.log combined

 RewriteEngine on
 RewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)
 RewriteRule .* - [F]

 RewriteEngine On
 RewriteCond %{REQUEST_URI} !^/\.well-known
 RewriteCond %{HTTPS} !=on
 RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R,L]

 # Optional: If you want to use LetsEncrypt keep this, otherwise remove it
 Alias /.well-known /var/www/letsencrypt/.well-known
</VirtualHost>

<VirtualHost *:443>
 SSLEngine On
 ServerName auth.example.com
 CustomLog /var/log/httpd/auth.example.com_ssl.log combined

 SSLEngine on
 SSLCertificateFile /etc/ssl/letsencrypt/auth.example.com.crt
 SSLCertificateKeyFile /etc/ssl/letsencrypt/auth.example.com.key
 SSLCertificateChainFile /etc/ssl/letsencrypt/auth.exampl.com.chain.pem

 SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:!aNULL:!MD5
 SSLHonorCipherOrder on

 # Optional: This avoids proxying local files which Apache can serve without
 # bother FusionAuth. There may be reasons to let FA deal with these files, in which
 # case these should be removed.
 Alias /js /usr/local/fusionauth/fusionauth-app/web/js
 Alias /css /usr/local/fusionauth/fusionauth-app/web/css
 Alias /images /usr/local/fusionauth/fusionauth-app/web/images

 RewriteEngine on

 # Optional (here for security reasons)
 RewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)
 RewriteRule .* - [F]

 # Users logging into the auth URL will end up at /login?code=...&userState=Authenticated
 # and will receive a 500 error from FusionAuth. This redirect sends them off to the application
 # to do whatever it was they wanted to do at the auth URL.
 RewriteCond %{REQUEST_METHOD}  =GET
 RewriteCond %{QUERY_STRING} (^|&)userState=Authenticated($|&)
 RewriteRule /login http://app.example.com/? [R,L]		# Set to the URL of your application

 # This rewrite corrects the client_id in proxied requests. It only does so if there was one
 # to start with, and it's not clever enough to realise it's already corrected it
 RewriteCond %{REQUEST_METHOD}  =GET
 RewriteCond %{QUERY_STRING} ^(.*)client_id=([^&]*)($|&)(.*)$
 RewriteRule ^(.*)$ $1?%1client_id=ab613909-571b-457c-a89e-336764f545d7%3%4 [E=rewritten:1]

 # This corrects a tennantID if there's one set already. This prevents users for fiddling with it
 # (or rather, users can write what they want in a URL, this ensures we only send the correct one
 # to FusionAuth)
 RewriteCond %{REQUEST_METHOD}  =GET
 RewriteCond %{QUERY_STRING} ^(.*)tenantId=([^&]*)($|&)(.*)$
 RewriteRule ^(.*)$ $1?%1tenantId=92e5c59d-4a54-499d-944f-70a06a4881a2%3%4 [E=rewritten:1]

 # This adds a tenantID if there isn't one already. It only does this if there is something in
 # the query string though. This avoids adding one to static content and the like.
 RewriteCond %{REQUEST_METHOD}  =GET
 RewriteCond %{QUERY_STRING} !^$
 RewriteCond %{QUERY_STRING} !tenantId=
 RewriteRule ^(.*)$ $1?%{QUERY_STRING}&tenantId=92e5c59d-4a54-499d-944f-70a06a4881a2 [E=rewritten:1]

 # Finally, this "noop" tells Apache to treat the rewritten URL as a URI and to re-run it through
 # the checks for proxies etc, otherwise it'll be treated as a local file (which will fail)
 RewriteCond "%{ENV:rewritten}" "=1"
 RewriteRule ^(.*)$ $1 [PT]

 # Optional: if you're using LE then keep this, otherwise remove it
 Alias /.well-known /var/www/letsencrypt/.well-known

 # These X- headers are required - without them CSRF won't work
 RequestHeader set X-Real-IP "%{REMOTE_ADDR}s"
 RequestHeader set X-Forwarded-Proto https
 RequestHeader set X-Forwarded-For "%{REMOTE_ADDR}s"
 # This header is useful for API calls that don't have query strings (and so will miss the rules above)
 RequestHeader set X-FusionAuth-TenantId 92e5c59d-4a54-499d-944f-70a06a4881a2

 ProxyPass / http://localhost:9011/

 # We have to send a "Host: xxx" header with the orginal server hostname in it
 ProxyPreserveHost On

 <Location />
  # This stops Apache sending X-Forwarded-Host and X-Forwarded-Server, which seem to trip up FusionAuth
  # It also stops X-Forwarded-For, which we need, but set that ourselves above. This also has to go
  # inside a <Location> otherwise it doesn't work.
  ProxyAddHeaders off
 </Location>
</VirtualHost>
