global
log /dev/log	local0
log /dev/log	local1 notice
chroot /var/lib/haproxy
stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
stats timeout 30s
user haproxy
group haproxy
daemon

# Default SSL material locations
ca-base /etc/ssl/certs
crt-base /etc/ssl/private

# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
tune.ssl.default-dh-param 2048
ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
log	global
mode	http
option	httplog
option	dontlognull
timeout connect 5000
timeout client  50000
timeout server  50000
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http

########################

frontend http_in
mode http
option http-use-htx
timeout client 5000ms
bind *:80
http-request add-header X-Forwarded-Proto http
http-request set-header X-Forwarded-Host %[req.hdr(Host)]
http-request add-header X-Forwarded-For %[src]

# Add your frontend name(s) here, you can have multiple ACLs for multiple different sites
# The ACLs will tell proxy which backend to route to based on what name is in the client's
# request header under "host"
acl auth_acl			hdr_end(host) -i auth.mysite.com

# If site requested by client was auth.mysite.com, use the auth backend
# It's best to have a single frontend and multiple backends
use_backend auth_backend if auth_acl

########################

frontend https_in
mode http
option http-use-htx
timeout client 5000ms
# Note that I am running my frontend using HTTP2, you can allow for auto-negotiation of HTTP 2 or HTTP 1.1 if you replace h2 with h2,http/1.1
bind *:443 ssl crt /etc/haproxy/yoursslcertandprivatekeytogether.pem alpn h2
http-request add-header X-Forwarded-Proto https
http-request set-header X-Forwarded-Host %[req.hdr(Host)]
http-request add-header X-Forwarded-For %[src]

# Add your frontend name(s) here, you can have multiple ACLs for multiple different sites
# The ACLs will tell proxy which backend to route to based on what name is in the client's
# request header under "host"
acl auth_acl			hdr_end(host) -i auth.mysite.com

# If site requested by client was auth.mysite.com, use the auth backend
# It's best to have a single frontend and multiple backends
use_backend auth_backend if auth_acl

########################

backend auth_backend
mode http
timeout server 5000ms
option http-use-htx
http-response replace-value Location ^http://(.*)$ https://\1
redirect scheme https if !{ ssl_fc }
# Redirect traffic to my internal FusionAuth server, do not verify self signed cert
server myFAserver myFAserver.mysite.com:9013 ssl verify none alpn h2,http/1.1

########################

#EOF